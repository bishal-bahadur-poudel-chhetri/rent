package repositories

import (
	"database/sql"
	"fmt"
	"renting/internal/models"
)

type SaleChargeRepository struct {
	db *sql.DB
}

func NewSaleChargeRepository(db *sql.DB) *SaleChargeRepository {
	return &SaleChargeRepository{db: db}
}

func (r *SaleChargeRepository) UpdateSalesCharge(chargeID int, charge models.SalesCharge) error {
	fmt.Printf("Repository: Updating charge ID %d with type '%s' and amount %f\n", chargeID, charge.ChargeType, charge.Amount)
	
	// First check if the charge exists
	var exists bool
	err := r.db.QueryRow("SELECT EXISTS(SELECT 1 FROM sales_charges WHERE charge_id = $1)", chargeID).Scan(&exists)
	if err != nil {
		fmt.Printf("Repository: Error checking if charge exists: %v\n", err)
		return fmt.Errorf("failed to check if charge exists: %v", err)
	}
	
	if !exists {
		fmt.Printf("Repository: Charge ID %d does not exist\n", chargeID)
		return fmt.Errorf("charge with ID %d does not exist", chargeID)
	}
	
	result, err := r.db.Exec(`
		UPDATE sales_charges 
		SET charge_type = $1, amount = $2
		WHERE charge_id = $3
	`, charge.ChargeType, charge.Amount, chargeID)
	if err != nil {
		fmt.Printf("Repository: Database error: %v\n", err)
		return fmt.Errorf("failed to update sales charge: %v", err)
	}
	
	rowsAffected, _ := result.RowsAffected()
	fmt.Printf("Repository: Update successful, rows affected: %d\n", rowsAffected)
	return nil
}

func (r *SaleChargeRepository) DeleteSalesCharge(chargeID int) error {
	_, err := r.db.Exec(`
		DELETE FROM sales_charges 
		WHERE charge_id = $1
	`, chargeID)
	if err != nil {
		return fmt.Errorf("failed to delete sales charge: %v", err)
	}
	return nil
}

func (r *SaleChargeRepository) GetSalesChargesBySaleID(saleID int) ([]models.SalesCharge, error) {
	rows, err := r.db.Query(`
		SELECT charge_id, sale_id, charge_type, amount
		FROM sales_charges 
		WHERE sale_id = $1
		ORDER BY charge_id DESC
	`, saleID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch sales charges: %v", err)
	}
	defer rows.Close()

	var charges []models.SalesCharge
	for rows.Next() {
		var charge models.SalesCharge
		err := rows.Scan(
			&charge.ChargeID,
			&charge.SaleID,
			&charge.ChargeType,
			&charge.Amount,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan sales charge: %v", err)
		}
		charges = append(charges, charge)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating sales charges: %v", err)
	}

	return charges, nil
}


func (r *SaleChargeRepository) AddSalesCharge(saleID int, charge models.SalesCharge) error {
	_, err := r.db.Exec(`
		INSERT INTO sales_charges (sale_id, charge_type, amount)
		VALUES ($1, $2, $3)
	`, saleID, charge.ChargeType, charge.Amount)
	return err
}
